<?xml version="1.0"?>
<launch>

    <!-- ROSPlan turtlebot3 demo with ROSPlan -->

    <arg name="map_file" default="$(find rosplan_inspection)/maps/map.yaml"/>
    <arg name="gazebo_gui" default="true"/>

    <!-- turtlebot3 simulation -->
    <include file="$(find rosplan_inspection)/launch/turtlebot3_bringup_sim.launch" >
        <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    </include>

    <!-- turtlebot3 navigation: move base, amcl (localisation) -->
    <include file="$(find turtlebot3_navigation)/launch/turtlebot3_navigation.launch" >
        <arg name="map_file" value="$(arg map_file)"/>
        <arg name="open_rviz" value="false"/>
    </include>

    <!-- roadmap (random waypoint generation) -->
    <include file="$(find rosplan_interface_mapping)/launch/rosplan_roadmap_server.launch" />

    <!-- ROSPlan -->
    <include file="$(find rosplan_planning_system)/launch/interfaced_planning_system.launch" >
        <arg name="domain_path" value="$(find rosplan_inspection)/common/domain_turtlebot_demo.pddl" />
        <!-- load a particular initial state into KB at startup (optional) -->
        <!-- we leave it empty because in this demo we use a bash script to upload information to KB, not a pddl problem -->
        <arg name="problem_path" value="" />
        <!-- automatically generated pddl problem will be created here -->
        <arg name="autom_gen_problem_path" value="$(find rosplan_inspection)/common/problem.pddl" />
        <!-- planner will produce output plan and write to this location -->
        <arg name="data_path" value="$(find rosplan_inspection)/common/" />
    </include>

    <!-- rosplan move base action interface, makes link between rosplan dispatcher and hardware -->
    <node pkg="rosplan_interface_movebase" type="rpmovebase" name="rosplan_interface_goto_waypoint" respawn="false" output="screen">
        <param name="knowledge_base" value="rosplan_knowledge_base" />
        <param name="action_server" value="/move_base" />
        <param name="pddl_action_name" value="goto_waypoint" />
        <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
        <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
    </node>

    <node pkg="rosplan_interface_movebase" type="rpmovebase" name="rosplan_interface_inspect_room" respawn="false" output="screen">
        <param name="knowledge_base" value="rosplan_knowledge_base" />
        <param name="action_server" value="/move_base" />
        <param name="pddl_action_name" value="inspect_room" />
        <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
        <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
    </node>

    <!-- visualisation of robot sensor data -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find rosplan_inspection)/config/turtlebot3.rviz" />

</launch>
